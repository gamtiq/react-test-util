{"version":3,"file":"react-test-util.js","sources":["../src/enzyme.js","../src/intl.js"],"sourcesContent":["/**\r\n * Utility functions to help testing React components with {@link https://airbnb.io/enzyme/ Enzyme}.\r\n *\r\n * @module enzyme\r\n */\r\n\r\nimport { expect } from 'chai';\r\nimport { shallow, ShallowWrapper } from 'enzyme';\r\n\r\n/**\r\n * Create a mock object representing event data.\r\n *\r\n * @param {string} type\r\n *      Event type.\r\n * @param {object} [props]\r\n *      Event properties.\r\n * @return {object}\r\n *      Object representing event data.\r\n * @author Denis Sikuler\r\n */\r\nexport function getEvent(type, props) {\r\n    return Object.assign(\r\n        {\r\n            type,\r\n            preventDefault() {},\r\n            stopPropagation() {},\r\n        },\r\n        props\r\n    );\r\n}\r\n\r\n/**\r\n * Simulate receiving of specified event by component/element.\r\n * See {@link http://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html simulate}.\r\n *\r\n * @param {ReactElement | ShallowWrapper} target\r\n *      Component that will undergo event simulation or\r\n *      {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/shallow.html ShallowWrapper} for such component.\r\n * @param {array | object | string} eventData\r\n *      Event type, object with event properties or array containing such items.\r\n * @return {ShallowWrapper}\r\n *      Passed or created {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/shallow.html ShallowWrapper}\r\n *      for which event simulation was made.\r\n * @see {@link http://airbnb.io/enzyme/docs/api/shallow.html}\r\n * @see {@link http://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html}\r\n */\r\nexport function shallowSimulate(target, eventData) {\r\n    const wrapper = target instanceof ShallowWrapper\r\n        ? target\r\n        : shallow(target);\r\n    const eventList = Array.isArray(eventData)\r\n        ? eventData\r\n        : [eventData];\r\n    for (let i = 0, len = eventList.length; i < len; i++) {\r\n        let evt = eventList[i];\r\n        evt = typeof evt === 'string'\r\n            ? getEvent(evt)\r\n            : getEvent('', evt);\r\n        wrapper.simulate(evt.type, evt);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n\r\n/**\r\n * Make specified checks for component's shallow wrapper and then unmount component.\r\n *\r\n * @param {ReactElement | ShallowWrapper} target\r\n *      Component that will undergo checks or\r\n *      {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/shallow.html ShallowWrapper} for such component.\r\n * @param {object} checkSet\r\n *      Specifies checks that will be made.\r\n * @param {Function} [checkSet.check]\r\n *      Function that will be called to test component's shallow wrapper.\r\n *      The wrapper will be passed into the function.\r\n * @param {object | string[]} [checkSet.hasClass]\r\n *      Checks for CSS classes which the component should or should not have.\r\n *      When array of strings is passed it means that the component should have all specified CSS classes.\r\n *      In case when object is passed, object's fields are CSS classes and field values are boolean values\r\n *      that specifies whether component should (when `true`) or should not (when `false`) have the corresponding class.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/hasClass.html hasClass}.\r\n * @param {string} [checkSet.html]\r\n *      Checks whether component has the specified rendered HTML markup.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/html.html html}.\r\n * @param {object} [checkSet.prop]\r\n *      Checks whether component has the specified props.\r\n *      Objects fields are prop names, field values are values that should have corresponding props.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/prop.html prop}.\r\n * @param {object} [checkSet.state]\r\n *      Checks whether component has the specified state fields.\r\n *      Objects fields are state field names, field values are values that should have corresponding state fields.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/state.html state}.\r\n * @param {string} [checkSet.text]\r\n *      Checks whether component has the specified rendered text.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/text.html text}.\r\n * @param {Function | string} [checkSet.type]\r\n *      Checks whether component's node has the specified type.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/type.html type}.\r\n * @param {object} [settings]\r\n *      Operation settings.\r\n * @param {object} [settings.expect]\r\n *      Assertion function that should be used for checking.\r\n *      Should have API similar to {@link https://www.chaijs.com/api/bdd/ chai's expect}\r\n *      (at least {@link https://www.chaijs.com/api/bdd/#method_equal equal} and\r\n *      {@link https://www.chaijs.com/api/bdd/#method_eql eql} methods).\r\n *      By default {@link https://www.chaijs.com/api/bdd/ chai's expect} is used.\r\n * @param {object} [settings.setProps]\r\n *      Specifies props that should be set for component before checks are started.\r\n *      See {@link https://airbnb.io/enzyme/docs/api/ShallowWrapper/setProps.html setProps}.\r\n * @see {@link http://airbnb.io/enzyme/docs/api/shallow.html}\r\n */\r\nexport function checkWrapperAndUnmount(target, checkSet, settings) {\r\n    if (! settings) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        settings = {};\r\n    }\r\n    const expectFunc = settings.expect || expect;\r\n\r\n    const wrapper = target instanceof ShallowWrapper\r\n        ? target\r\n        : shallow(target);\r\n\r\n    if (settings.setProps) {\r\n        wrapper.setProps(settings.setProps);\r\n    }\r\n\r\n    let check = checkSet.state;\r\n    if (check) {\r\n        for (const field in check) {\r\n            expectFunc( wrapper.state(field) )\r\n                .eql( check[field] );\r\n        }\r\n    }\r\n\r\n    check = checkSet.prop;\r\n    if (check) {\r\n        for (const field in check) {\r\n            expectFunc( wrapper.prop(field) )\r\n                .eql( check[field] );\r\n        }\r\n    }\r\n\r\n    check = checkSet.hasClass;\r\n    if (check) {\r\n        if (Array.isArray(check)) {\r\n            for (let i = 0, len = check.length; i < len; i++) {\r\n                expectFunc( wrapper.hasClass(check[i]) )\r\n                    .equal( true );\r\n            }\r\n        }\r\n        else {\r\n            for (const field in check) {\r\n                expectFunc( wrapper.hasClass(field) )\r\n                    .equal( check[field] );\r\n            }\r\n        }\r\n    }\r\n\r\n    if ('html' in checkSet) {\r\n        expectFunc( wrapper.html() )\r\n            .equal( checkSet.html );\r\n    }\r\n\r\n    if ('text' in checkSet) {\r\n        expectFunc( wrapper.text() )\r\n            .equal( checkSet.text );\r\n    }\r\n\r\n    check = checkSet.type;\r\n    if (check) {\r\n        expectFunc( wrapper.type() )\r\n            .equal( check );\r\n    }\r\n\r\n    check = checkSet.check;\r\n    if (check) {\r\n        check(wrapper);\r\n    }\r\n\r\n    wrapper.unmount();\r\n}\r\n","/**\r\n * Utility functions to test code that uses {@link https://github.com/formatjs/react-intl/ react-intl}.\r\n *\r\n * @module intl\r\n */\r\n\r\nimport { createIntl, createIntlCache } from 'react-intl';\r\n\r\nconst intlCache = createIntlCache();\r\n\r\n/**\r\n * Create object that provides access to i18n/intl functions ({@link https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape IntlShape}).\r\n *\r\n * @param {Object | string} [props]\r\n *      Properties or locale of object that will be created.\r\n *      By default the following value is used for `props` parameter: `{locale: 'en'}`.\r\n * @return {Object}\r\n *      Object that provides access to i18n/intl functions ({@link https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape IntlShape}).\r\n */\r\nexport function getIntl(props) {\r\n    let intlProps;\r\n    if (props) {\r\n        intlProps = typeof props === 'string'\r\n            ? {locale: props}\r\n            : props;\r\n    }\r\n    else {\r\n        intlProps = {locale: 'en'};\r\n    }\r\n\r\n    return createIntl(intlProps, intlCache);\r\n}\r\n\r\n/**\r\n * Add `intl` field in the given object.\r\n * Value of the field is an object that provides access to i18n/intl functions\r\n * ({@link https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape IntlShape}).\r\n *\r\n * @param {Object} [target]\r\n *      Target object into which `intl` field should be added.\r\n *      If target object is not specified, newly created object will be used and returned.\r\n * @param {Object | string} [intlProps]\r\n *      Properties or locale of `intl` object that will be created.\r\n * @return {Object}\r\n *      Object with `intl` field (value of `target` parameter or newly created object when `target` is not specified).\r\n */\r\nexport function addIntlProp(target, intlProps) {\r\n    const result = target || {};\r\n    result.intl = getIntl(intlProps);\r\n\r\n    return result;\r\n}\r\n"],"names":["getEvent","type","props","Object","assign","preventDefault","stopPropagation","shallowSimulate","target","eventData","wrapper","ShallowWrapper","shallow","eventList","Array","isArray","let","i","len","length","evt","simulate","checkWrapperAndUnmount","checkSet","settings","expectFunc","expect","setProps","check","state","const","field","eql","prop","hasClass","equal","html","text","unmount","intlCache","createIntlCache","getIntl","intlProps","locale","createIntl","addIntlProp","result","intl"],"mappings":"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"}